{
  "name": "semile",
  "tagline": "profile what you care, monitor how it goes",
  "body": "# semile\r\n_~profile what you care, monitor how it goes~_\r\n\r\n***\r\n\r\n#What is semile?  \r\nA profiling framework that provides the ability to monitor programs, in general of any programming language, by the following two pieces of information:  \r\n1. consumed time per execution  \r\n2. 'footprint' message per execution  \r\n\r\n#Difference with other profiling tools?  \r\n* **_Profile 'semantically'_**  Each call to the same function plays its individual role within profiling. Normal 'syntactic' profilers are good in other aspects but fail to achieve this.  \r\n* **_Lightweight_**  The profiled program gives little run-time overhead. The viewer is compact that targets to provide only necessary information without fancy visual effect. It gives profile result in widespread PNG and XML format.  \r\n* **_Message-embedded profile_**  Customized information can be left within profile elements. It then also provides the ability to help reveal internal state/decision inside the program.  \r\n\r\nP.S. The user-provided semantic specifications (via the profile library) is necessary for semantic profile  \r\n\r\n# System Requirement\r\npython3 (viewer)  \r\ng++ (cpp profile library)  \r\n\r\n# Dependent Library\r\n<a href=\"http://www.graphviz.org\" target=\"_blank\">dot (graphviz)</a>    \r\n\r\n***\r\n\r\n# Viewer Demonstration \r\n<a href=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semantic-profile/sample.png\" target=\"_blank\"><img border=\"0\" alt=\"semile viewer PNG format sample\" src=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semantic-profile/sample.png\" width=\"616\" height=\"120\"></a>  \r\n(PNG format)  \r\n  \r\n<a href=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semantic-profile/sample_xml.png\" target=\"_blank\"><img border=\"0\" alt=\"semile viewer PNG format sample\" src=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semantic-profile/sample_xml.png\" width=\"252\" height=\"188\"></a>  \r\n(XML format, browse by <a href=\"http://codebeautify.org/xmlviewer\" target=\"_blank\">codebeautify.org/xmlviewer</a>))\r\n\r\n***\r\n\r\n# Profile Library  \r\n`semile` does not aim to profile all program execution, it only profile the execution specified via the profile library. Currently, cpp profile library is provided.  \r\n\r\n# Tutorial: profile a cpp program  \r\n1. Choose the execution to be profiled  \r\n2. Let the execution be in some sense derived from `ExecutionMonitor`  \r\n  * Model the execution as a function, and place it inside an `ExecutionMonitor` descendant.  \r\n  * In particular, if the execution matches life cycle of a class object, then subclass `ExecutionMonitor` does the job.  \r\n\r\nOptionally, call `ExecutionMonitor::addMessage()` during life cycle of the `ExecutionMonitor` descendant, to leave any footprint message.  \r\n\r\n# Code example    \r\n```c++\r\nvoid quicksort(vector<int>& x, int start_pos, int end_pos);\r\n```\r\nSuppose _quicksort_ is the profiling target,  \r\n\r\n```c++\r\nclass QuicksortMonitor: public ExecutionMonitor\r\n{\r\n  QuicksortMonitor()\r\n   :ExecutionMonitor(\"quicksort\", __FILE__, __LINE__)  {}\r\n  void operator()(vector<int>& x, int start_pos, int end_pos) \r\n  { \r\n    return quicksort_impl(x, start_pos, end_pos); \r\n  }\r\n};\r\n```\r\nClass _QuicksortMonitor_, derived from `ExecutionMonitor`, is created. There is a function operator inside _QuicksortMonitor_, with its interface and implementation copy from _quicksort_. Note that _quicksort_ is renamed to _quicksort_impl_.  \r\n\r\n```c++\r\nvoid quicksort(vector<int>& x, int start_pos, int end_pos)\r\n{\r\n  QuicksortMonitor()(x, start_pos, end_pos);\r\n}\r\n```\r\nThe profiling enabled _quicksort_ now instantiate a _QuicksortMonitor_ instance, and invokes its function operator.  \r\n\r\n```c++\r\nvoid QuicksortMonitor::addMsg(\r\n  const vector<int>& x, int start_pos, int end_pos)\r\n{  \r\n  stringstream stream;\r\n  for (int i = start_pos; i <= end_pos; ++i) {\r\n    stream << x[i] << \" \";\r\n  }\r\n  addMessage(stream.str());\r\n}\r\n```\r\nIn addition, we can log profile message within _QuicksortMonitor_ at any time.  \r\n\r\n\r\n\r\nOne possible viewer generated PNG is as follows:  \r\n<a href=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semantic-profile/profile_quicksort.png\" target=\"_blank\"><img border=\"0\" alt=\"the viewer generated PNG for quicksort\" src=\"https://raw.githubusercontent.com/r-kan/r-kan.github.io/master/images/semantic-profile/profile_quicksort.png\" width=\"616\" height=\"96\"></a>  \r\n\r\n***\r\n\r\n# Contact  \r\nPlease contact *rkan* by its_right@msn.com for any question/request/bug without hesitation. ",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}